// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

model User {
  id           String                 @id @default(auto()) @map("_id") @db.ObjectId
  email        String                 @unique
  phone        String                 @unique
  passwordHash String
  role         Role                   @default(USER)
  addresses    Address[]
  cart         SingleProductInvoice[]
  Invoice      Invoice[]
}

type Address {
  unitNumber String
  street     String
  district   String
  city       String
}

enum Size {
  S
  M
  L
  XL
}

model Topping {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  name  String
  desc  String
  image String
  price Float
  stock Int

  ProductMetadata        ProductMetadata?      @relation(fields: [productMetadataId], references: [id])
  productMetadataId      String?               @db.ObjectId
  SingleProductInvoice   SingleProductInvoice? @relation(fields: [singleProductInvoiceId], references: [id])
  singleProductInvoiceId String?               @db.ObjectId
}

model ProductSize {
  id                   String                 @id @default(auto()) @map("_id") @db.ObjectId
  size                 Size
  price                Float
  stock                Int
  SingleProductInvoice SingleProductInvoice[]

  ProductMetadata   ProductMetadata? @relation(fields: [productMetadataId], references: [id])
  productMetadataId String?          @db.ObjectId
}

model Category {
  id                String           @id @default(auto()) @map("_id") @db.ObjectId
  name              String           @unique
  desc              String
  image             String
  itemCount         Int
  ProductMetadata   ProductMetadata? @relation(fields: [productMetadataId], references: [id])
  productMetadataId String?          @db.ObjectId
}

model ProductMetadata {
  id                   String                 @id @default(auto()) @map("_id") @db.ObjectId
  name                 String
  desc                 String
  images               String[]
  availableSizes       ProductSize[]
  availableToppings    Topping[]
  categories           Category[]
  SingleProductInvoice SingleProductInvoice[]
}

model SingleProductInvoice {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  metadata          ProductMetadata @relation(fields: [productMetadataId], references: [id])
  productMetadataId String          @db.ObjectId

  size          ProductSize @relation(fields: [productSizeId], references: [id])
  productSizeId String      @db.ObjectId

  toppings Topping[]

  quantity Int

  Invoice   Invoice? @relation(fields: [invoiceId], references: [id])
  invoiceId String?  @db.ObjectId
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?  @db.ObjectId
}

model Invoice {
  id          String                 @id @default(auto()) @map("_id") @db.ObjectId
  user        User                   @relation(fields: [userId], references: [id])
  products    SingleProductInvoice[]
  totalPrice  Float
  shippingFee Float
  createdAt   DateTime               @default(now())
  updatedAt   DateTime               @updatedAt
  userId      String                 @db.ObjectId
  Order       Order[]
}

enum OrderStatus {
  PENDING
  CONFIRMED
  DELIVERING
  DELIVERED
  CANCELLED
}

model Order {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  invoice   Invoice @relation(fields: [invoiceId], references: [id])
  invoiceId String  @db.ObjectId

  status OrderStatus

  shippingAddress Address

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
