// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

model User {
  id             String                 @id @default(auto()) @map("_id") @db.ObjectId
  email          String                 @unique
  phone          String                 @unique
  passwordHash   String
  role           Role                   @default(USER)
  addresses      Address[]
  cart           SingleProductInvoice[]
  Invoice        Invoice[]
  ReviewMetadata ReviewMetadata[]
}

type Address {
  unitNumber String
  street     String
  district   String
  city       String
}

enum Size {
  S
  M
  L
  XL
}

model ToppingMetadata {
  id             String           @id @default(auto()) @map("_id") @db.ObjectId
  name           String           @unique
  desc           String
  image          String
  price          Float
  stock          Int
  ProductTopping ProductTopping[]
}

model ProductTopping {
  id                String           @id @default(auto()) @map("_id") @db.ObjectId
  topping           ToppingMetadata  @relation(fields: [toppingMetadataId], references: [id])
  toppingMetadataId String           @db.ObjectId
  ProductMetadata   ProductMetadata? @relation(fields: [productMetadataId], references: [id])
  productMetadataId String?          @db.ObjectId
}

model ProductSize {
  id                   String                 @id @default(auto()) @map("_id") @db.ObjectId
  size                 Size
  price                Float
  stock                Int
  SingleProductInvoice SingleProductInvoice[]
  ProductMetadata      ProductMetadata?       @relation(fields: [productMetadataId], references: [id])
  productMetadataId    String?                @db.ObjectId
}

model Category {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  name      String @unique
  desc      String
  image     String
  itemCount Int
}

model ProductMetadata {
  id                   String                 @id @default(auto()) @map("_id") @db.ObjectId
  name                 String
  desc                 String
  images               String[]
  basePrice            Float
  category             String
  availableSizes       ProductSize[]
  availableToppings    ProductTopping[]
  reviews              ProductReview[]
  SingleProductInvoice SingleProductInvoice[]
}

model SingleProductInvoice {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  metadata          ProductMetadata @relation(fields: [productMetadataId], references: [id])
  productMetadataId String          @db.ObjectId

  size          ProductSize @relation(fields: [productSizeId], references: [id])
  productSizeId String      @db.ObjectId

  quantity Int

  Invoice   Invoice? @relation(fields: [invoiceId], references: [id])
  invoiceId String?  @db.ObjectId
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?  @db.ObjectId
}

model Invoice {
  id          String                 @id @default(auto()) @map("_id") @db.ObjectId
  user        User                   @relation(fields: [userId], references: [id])
  products    SingleProductInvoice[]
  totalPrice  Float
  shippingFee Float
  createdAt   DateTime               @default(now())
  updatedAt   DateTime               @updatedAt
  userId      String                 @db.ObjectId
  Order       Order[]
}

enum OrderStatus {
  PENDING
  CONFIRMED
  DELIVERING
  DELIVERED
  CANCELLED
}

model Order {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  invoice   Invoice @relation(fields: [invoiceId], references: [id])
  invoiceId String  @db.ObjectId

  status OrderStatus

  shippingAddress Address

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ReviewMetadata {
  id                String          @id @default(auto()) @map("_id") @db.ObjectId
  user              User            @relation(fields: [userId], references: [id])
  rating            Int
  comment           String
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  productMetadataId String?         @db.ObjectId
  userId            String          @db.ObjectId
  ProductReview     ProductReview[]
}

model ProductReview {
  id                String           @id @default(auto()) @map("_id") @db.ObjectId
  reviewMetadata    ReviewMetadata   @relation(fields: [reviewMetadataId], references: [id])
  reviewMetadataId  String           @db.ObjectId
  ProductMetadata   ProductMetadata? @relation(fields: [productMetadataId], references: [id])
  productMetadataId String?          @db.ObjectId
}
